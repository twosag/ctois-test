import { MyContext } from '../bot';
import { ethernetMenuCampus, ethernetCorpusSumdu, ethernetCorpusMed,ethernetCorpusUabs, mainMenu, backButton } from '../buttons';
import { Bot, Context} from "grammy";
import {Conversation,conversations,createConversation} from "@grammyjs/conversations";
import { replyEthernet } from '../handlers/reply'; 


//–í—ã–∑–æ–≤ –º–µ–Ω—é "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è" —Å –≤—ã–±–æ—Ä–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
export function setupProblem1Handlers(bot: Bot<MyContext>) {

    bot.callbackQuery(["ethernet"], async (ctx) => {
        try {
            await ctx.editMessageText('–î–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –≤–∫–∞–∂—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫–∞–º–ø—É—Å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:', { reply_markup: ethernetMenuCampus })
        } catch (error) {
            console.error(error);
            await ctx.reply('–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
    });
    
    bot.callbackQuery(["–ì–æ–ª–æ–≤–Ω–∏–π –∫–∞–º–ø—É—Å –°—É–º–î–£", "–ö–∞–º–ø—É—Å –ú–µ–¥–∏—á–Ω–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É","–ö–∞–º–ø—É—Å –ù–ù–Ü –ë–¢ \"–£–ê–ë–°\" —Ç–∞ –ù–ù–Ü–ü"], async (ctx) => {
        const institut = ctx.callbackQuery.data;
        try {
            let menu;
            if (institut === '–ì–æ–ª–æ–≤–Ω–∏–π –∫–∞–º–ø—É—Å –°—É–º–î–£') {
                menu = ethernetCorpusSumdu;
                await ctx.editMessageText('–í—ã–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–ø—É—Å –≤–∞—à–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –≤ —è–∫–æ–º—É –≤–∏ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ:', { reply_markup: menu });
            } else if (institut === '–ö–∞–º–ø—É—Å –ú–µ–¥–∏—á–Ω–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É') {
                await ctx.conversation.enter("ethernet_conv");
            } else if (institut === '–ö–∞–º–ø—É—Å –ù–ù–Ü –ë–¢ "–£–ê–ë–°" —Ç–∞ –ù–ù–Ü–ü') {
                menu = ethernetCorpusUabs;
                await ctx.editMessageText('–í—ã–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–ø—É—Å –≤–∞—à–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –≤ —è–∫–æ–º—É –≤–∏ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ:', { reply_markup: menu });
            }
            ctx.session.institut = institut
            
        } catch (error) {
            console.error(error);
            await ctx.reply('–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
    });
    //–í–∏–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–ø—É—Å–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
    bot.on("callback_query:data", async (ctx) => {
        const corpus = ctx.callbackQuery.data;
        try {
            ctx.session.corpus = corpus;
            await ctx.conversation.enter("ethernet_conv");
            console.log(ctx.callbackQuery)
        } catch (error) {
            console.error(error);
            await ctx.reply('–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
    });
}


const chatId = -1001954529652
//–ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ + –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä (–í–∏–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º + –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /start)
export function ethernetConversation() {
    
    return createConversation(
        async (conversation: Conversation<MyContext>, ctx: MyContext) => {
            let room_number;
            do {
                if (room_number === "/start") {
                    return ctx.reply("–î—è–∫—É—é", {reply_markup: mainMenu});
                } else {
                    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                const room_number_message = await conversation.wait();
                room_number = room_number_message.message?.text;
                
                };
            } while (isNaN(Number(room_number)));

            let comp_number
            do {
                if (comp_number === "/start") {
                    return ctx.reply("–î—è–∫—É—é", {reply_markup: mainMenu});
                } else {
                    await ctx.reply("–¢–∞–∫–æ–∂ –≤–∫–∞–∂—ñ—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–ª–æ–∫—É, –¥–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç")
                    const comp_number_message = await conversation.wait();
                    comp_number = comp_number_message.message?.text;
                }
            } while (isNaN(Number(comp_number)));
            console.log({comp_number})
            console.log({room_number})
            const username = ctx.from?.username;
            const first_name = ctx.from?.first_name;
            const last_name= ctx.from?.last_name;
            const problem ="–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"
            const message = replyEthernet(problem, ctx.session.institut, ctx.session.corpus, room_number, comp_number, username, first_name, last_name,);
            //await ctx.reply("–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –ù–µ–∑–∞–±–∞—Ä–æ–º –¥–æ –≤–∞—Å –∑–∞–≤—ñ—Ç–∞—î —Å–∏—Å—Ç–µ–º–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!üòä");
            await ctx.answerCallbackQuery({text:"‚úÖ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –±—É–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ —Ä–æ–∑–≥–ª—è–¥—É", show_alert: true});
            await ctx.reply("–í—ã –±—É–ª–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω—ñ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", {reply_markup: mainMenu})
            await ctx.api.sendMessage(chatId, await message, { parse_mode: 'Markdown' });
            return;
        },"ethernet_conv"
    );
};



