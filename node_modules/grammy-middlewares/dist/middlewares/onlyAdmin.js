"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onlyAdmin = void 0;
const onlyAdmin = (errorHandler) => (ctx, next) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    // No chat = no service
    if (!ctx.chat) {
        return;
    }
    // Channels and private chats are only postable by admins
    if (['channel', 'private'].includes(ctx.chat.type)) {
        return next();
    }
    // Anonymous users are always admins
    if (((_a = ctx.from) === null || _a === void 0 ? void 0 : _a.username) === 'GroupAnonymousBot') {
        return next();
    }
    // Surely not an admin
    if (!((_b = ctx.from) === null || _b === void 0 ? void 0 : _b.id)) {
        return;
    }
    // Check the member status
    const chatMember = yield ctx.getChatMember(ctx.from.id);
    if (['creator', 'administrator'].includes(chatMember.status)) {
        return next();
    }
    // Not an admin
    return errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(ctx);
});
exports.onlyAdmin = onlyAdmin;
//# sourceMappingURL=onlyAdmin.js.map